datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                      Int           @id @default(autoincrement())
  username                String        @unique
  email                   String        @unique
  phoneNumber             String?       @unique
  passwordHash            String
  role                    Role?         @default(USER)
  profile                 Profile?
  sessionsAsUser          Session[]     @relation("UserSessions")
  sessionsAsDietitian     Session[]     @relation("DietitianSessions")
  messagesSent            Message[]     @relation("MessagesSent")
  messagesReceived        Message[]     @relation("MessagesReceived")
  mealPlans               MealPlan[]
  performances            Performance[]
  appointmentsAsUser      Appointment[] @relation("UserAppointments")
  appointmentsAsDietitian Appointment[] @relation("DietitianAppointments")
  lastUpdatingUser        String?
  lastUpdateDate          DateTime?     @updatedAt
  recordStatus            String?       @default("A")
}

model Profile {
  id                 Int       @id @default(autoincrement())
  userId             Int       @unique
  user               User      @relation(fields: [userId], references: [id])
  firstName          String?
  secondName         String?
  lastName           String?
  age                Int?
  weight             Float?
  isProfileCompleted Boolean?  @default(false)
  goals              Goal
  photoUrl           String?
  lastUpdatingUser   String?
  lastUpdateDate     DateTime? @updatedAt
  recordStatus       String?   @default("A")
}

model Session {
  id               Int           @id @default(autoincrement())
  userId           Int
  dietitianId      Int
  date             DateTime
  status           SessionStatus @default(PENDING)
  user             User          @relation(name: "UserSessions", fields: [userId], references: [id])
  dietitian        User          @relation(name: "DietitianSessions", fields: [dietitianId], references: [id])
  lastUpdatingUser String?
  lastUpdateDate   DateTime?     @updatedAt
  recordStatus     String        @default("A")
}

model Message {
  id               Int       @id @default(autoincrement())
  content          String
  sentAt           DateTime  @default(now())
  userId           Int
  recipientId      Int
  sender           User      @relation(name: "MessagesSent", fields: [userId], references: [id])
  recipient        User      @relation(name: "MessagesReceived", fields: [recipientId], references: [id])
  lastUpdatingUser String?
  lastUpdateDate   DateTime? @updatedAt
  recordStatus     String    @default("A")
}

model MealPlan {
  id               Int       @id @default(autoincrement())
  userId           Int
  description      String
  createdAt        DateTime  @default(now())
  meals            Meal[]
  user             User      @relation(fields: [userId], references: [id])
  lastUpdatingUser String?
  lastUpdateDate   DateTime? @updatedAt
  recordStatus     String    @default("A")
}

model Meal {
  id               Int       @id @default(autoincrement())
  mealPlanId       Int
  name             String
  time             DateTime
  mealPlan         MealPlan  @relation(fields: [mealPlanId], references: [id])
  lastUpdatingUser String?
  lastUpdateDate   DateTime? @updatedAt
  recordStatus     String    @default("A")
}

model Performance {
  id               Int       @id @default(autoincrement())
  userId           Int
  date             DateTime
  weight           Float?
  fatPercentage    Float?
  muscleMass       Float?
  user             User      @relation(fields: [userId], references: [id])
  lastUpdatingUser String?
  lastUpdateDate   DateTime? @updatedAt
  recordStatus     String    @default("A")
}

model Appointment {
  id               Int               @id @default(autoincrement())
  userId           Int
  dietitianId      Int?
  date             DateTime
  status           AppointmentStatus @default(PENDING)
  user             User              @relation(name: "UserAppointments", fields: [userId], references: [id])
  dietitian        User?             @relation(name: "DietitianAppointments", fields: [dietitianId], references: [id])
  lastUpdatingUser String?
  lastUpdateDate   DateTime?         @updatedAt
  recordStatus     String            @default("A")
}

enum Role {
  USER
  DIETITIAN
  ADMIN
  BASICUSER
  VIPUSER
}

enum SessionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum Goal {
  GAINMUSCLES
  GAINWEIGHT
  WEIGHTLOSS
}
